diff --git a/linalg/la.hpp b/linalg/la.hpp
index 426b843d9..7b8a4ca67 100644
--- a/linalg/la.hpp
+++ b/linalg/la.hpp
@@ -23,7 +23,7 @@ namespace ngla
 #include "sparsematrix_dyn.hpp"
 #include "order.hpp"
 #include "sparsecholesky.hpp"
-#include "pardisoinverse.hpp"
+// #include "pardisoinverse.hpp"
 #include "jacobi.hpp"
 #include "blockjacobi.hpp"
 #include "commutingAMG.hpp"
diff --git a/linalg/pardisoinverse.cpp b/linalg/pardisoinverse.cpp
index 881843067..5c3e26099 100644
--- a/linalg/pardisoinverse.cpp
+++ b/linalg/pardisoinverse.cpp
@@ -48,20 +48,10 @@ extern  integer F77_FUNC(pardisoinit)
 
 #endif
 
-#else // USE_PARDISO
-  // Neither MKL nor PARDISO linked at compile-time
-  // check for MKL at run-time and set function pointers if available
-#define MKL_PARDISO
-
-  void (*mkl_free_buffers) (void) = nullptr;
-  void (*F77_FUNC(pardiso))
-    (void * pt, integer * maxfct, integer * mnum, integer * mtype, integer * phase, integer * n,
-     double * a, integer * ia, integer * ja, integer * perm, integer * nrhs, integer * iparam,
-     integer * msglvl, double * b, double * x, integer * error) = nullptr;
-
 #endif // USE_PARDISO
 }
 
+#ifdef USE_PARDISO
 
 #ifdef USE_MKL
 namespace ngstd
@@ -74,35 +64,6 @@ namespace ngstd
 
 namespace ngla
 {
-#ifdef USE_PARDISO
-  bool is_pardiso_available = true;
-#else
-#ifndef __EMSCRIPTEN__
-  static SharedLibrary libmkl;
-  static bool LoadMKL()
-  {
-      try
-      {
-#ifdef WIN32
-          libmkl.Load("mkl_rt.dll");
-#else
-          libmkl.Load("libmkl_rt.so");
-#endif
-          mkl_free_buffers = libmkl.GetSymbol<decltype(mkl_free_buffers)>("mkl_free_buffers");
-          F77_FUNC(pardiso) = libmkl.GetSymbol<decltype(pardiso_)>("pardiso_");
-          return mkl_free_buffers && F77_FUNC(pardiso);
-      }
-      catch(const std::runtime_error &)
-      {
-          return false;
-      }
-  };
-  bool is_pardiso_available = LoadMKL();
-#else // __EMSCRIPTEN__
-  bool is_pardiso_available = false;
-#endif // __EMSCRIPTEN__
-#endif
-
   int pardiso_msg = 0;
 
 
@@ -219,7 +180,7 @@ namespace ngla
 
     for (int i = 0; i < 128; i++) pt[i] = 0;
 
-#ifdef MKL_PARDISO
+#ifdef USE_MKL
     //    no init in MKL PARDISO
 #else
 
@@ -654,9 +615,9 @@ namespace ngla
     F77_FUNC(pardiso) ( pt, &maxfct, &mnum, &matrixtype, &phase, &compressed_height, NULL,
 			rowstart.Data(), indices.Data(), NULL, &nrhs, params, &msglevel,
 			NULL, NULL, &error );
-#ifdef MKL_PARDISO
+#ifdef USE_MKL
     mkl_free_buffers();
-#endif // MKL_PARDISO
+#endif // USE_MKL
     GetMemoryTracer().Free(memory_allocated_in_pardiso_lib);
     memory_allocated_in_pardiso_lib = 0;
     if (task_manager) task_manager -> StartWorkers();
@@ -823,3 +784,6 @@ namespace ngla
 
 }
 
+
+
+#endif
diff --git a/linalg/pardisoinverse.hpp b/linalg/pardisoinverse.hpp
index 3ee46464a..7fe4b3fc5 100644
--- a/linalg/pardisoinverse.hpp
+++ b/linalg/pardisoinverse.hpp
@@ -20,7 +20,6 @@
 namespace ngla
 {
   using ngbla::integer;
-  extern bool is_pardiso_available;
 
 
   /*
diff --git a/linalg/python_linalg.cpp b/linalg/python_linalg.cpp
index 5745be1de..c32209343 100644
--- a/linalg/python_linalg.cpp
+++ b/linalg/python_linalg.cpp
@@ -1818,8 +1818,9 @@ shift : object
 
   m.def("GetAvailableSolvers", []() {
     py::list solvers;
-    if(is_pardiso_available)
+#ifdef USE_PARDISO
       solvers.append(GetInverseName(PARDISO));
+#endif
 #ifdef USE_MUMPS
     solvers.append(GetInverseName(MUMPS));
 #endif // USE_MUMPS
diff --git a/linalg/sparsematrix.cpp b/linalg/sparsematrix.cpp
index 8b114847b..47e001222 100644
--- a/linalg/sparsematrix.cpp
+++ b/linalg/sparsematrix.cpp
@@ -2006,10 +2006,11 @@ namespace ngla
       }
     else if ( BaseSparseMatrix :: GetInverseType()  == PARDISO ||  BaseSparseMatrix :: GetInverseType()  == PARDISOSPD)
       {
-        if(is_pardiso_available)
+#ifdef USE_PARDISO
           return make_shared<PardisoInverse<TM,TV_ROW,TV_COL>> (dynamic_pointer_cast<const SparseMatrix<TM,TV_ROW,TV_COL>>(this->shared_from_this()), subset, nullptr, 1);
-        else
+#else
           throw Exception ("SparseMatrix::InverseMatrix:  PardisoInverse not available");
+#endif
       }
     else if (  BaseSparseMatrix :: GetInverseType()  == UMFPACK)
       {
@@ -2047,10 +2048,11 @@ namespace ngla
       }
     else if (  BaseSparseMatrix :: GetInverseType()  == PARDISO ||  BaseSparseMatrix :: GetInverseType()  == PARDISOSPD)
       {
-        if(is_pardiso_available)
+#ifdef USE_PARDISO
           return make_shared<PardisoInverse<TM,TV_ROW,TV_COL>> (dynamic_pointer_cast<const SparseMatrix<TM,TV_ROW,TV_COL>>(this->shared_from_this()), nullptr, clusters, 1);
-        else
+#else
           throw Exception ("SparseMatrix::InverseMatrix:  PardisoInverse not available");
+#endif
       }
     else if (  BaseSparseMatrix :: GetInverseType()  == UMFPACK)
       {
@@ -2177,13 +2179,12 @@ shared_ptr<BaseMatrix> InverseSparseMatrixTM (shared_ptr<const SparseMatrix<TM,T
     case(PARDISO):
     case(PARDISOSPD):
     {
-      if(is_pardiso_available)
+#ifdef USE_PARDISO
         return make_shared<PardisoInverse<TM,TV_ROW,TV_COL>>(A, subset, clusters);
-      else
-      {
+#else
         throw Exception ("SparseMatrix::InverseMatrix:  PardisoInverse not available");
         return nullptr;
-      }
+#endif
       break;
     }
     case(UMFPACK):
diff --git a/solve/ngsolve.cpp b/solve/ngsolve.cpp
index c742c0433..d2e7018ac 100644
--- a/solve/ngsolve.cpp
+++ b/solve/ngsolve.cpp
@@ -695,8 +695,9 @@ int NGSolve_Init (Tcl_Interp * interp)
 #endif
 
 
-if(is_pardiso_available)
+#ifdef USE_PARDISO
   cout << "Including sparse direct solver Pardiso" << endl;
+#endif
 
 #ifdef USE_UMFPACK
   cout << "Including sparse direct solver UMFPACK" << endl;
