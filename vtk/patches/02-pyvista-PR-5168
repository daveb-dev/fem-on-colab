diff --git a/pyvista/jupyter/__init__.py b/pyvista/jupyter/__init__.py
index ba140a4092..c73189de3f 100644
--- a/pyvista/jupyter/__init__.py
+++ b/pyvista/jupyter/__init__.py
@@ -11,6 +11,7 @@
     'client',
     'server',
     'trame',
+    'html',
     'none',
 ]

@@ -38,7 +39,7 @@ def _validate_jupyter_backend(backend):
             f'Use one of the following:\n{backend_list_str}'
         )

-    if backend in ['server', 'client', 'trame']:
+    if backend in ['server', 'client', 'trame', 'html']:
         try:
             from pyvista.trame.jupyter import show_trame
         except ImportError:  # pragma: no cover
@@ -79,6 +80,9 @@ def set_jupyter_backend(backend, name=None, **kwargs):
           ``'server'`` and ``'client'`` into one backend. This requires a
           virtual frame buffer.

+        * ``'html'`` : Export/serialize the scene graph to be rendered
+          with the Trame client backend but in a static HTML file.
+
         * ``'none'`` : Do not display any plots within jupyterlab,
           instead display using dedicated VTK render windows.  This
           will generate nothing on headless servers even with a
@@ -105,7 +109,7 @@ def set_jupyter_backend(backend, name=None, **kwargs):

     """
     pyvista.global_theme._jupyter_backend = _validate_jupyter_backend(backend)
-    if backend in ['server', 'client', 'trame']:
+    if backend in ['server', 'client', 'trame', 'html']:
         # Launch the trame server
         from pyvista.trame.jupyter import elegantly_launch

diff --git a/pyvista/jupyter/notebook.py b/pyvista/jupyter/notebook.py
index 8b794e1ce7..60a60152fc 100644
--- a/pyvista/jupyter/notebook.py
+++ b/pyvista/jupyter/notebook.py
@@ -6,6 +6,7 @@
 * ``trame``
 * ``client``
 * ``server``
+* ``html``

 """
 import warnings
@@ -24,7 +25,7 @@ def handle_plotter(plotter, backend=None, screenshot=None, **kwargs):
         screenshot = None

     try:
-        if backend in ['server', 'client', 'trame']:
+        if backend in ['server', 'client', 'trame', 'html']:
             from pyvista.trame.jupyter import show_trame

             return show_trame(plotter, mode=backend, **kwargs)
diff --git a/pyvista/plotting/plotter.py b/pyvista/plotting/plotter.py
index fd59242820..32e3cacd1d 100644
--- a/pyvista/plotting/plotter.py
+++ b/pyvista/plotting/plotter.py
@@ -139,6 +139,7 @@ def _warn_xserver():  # pragma: no cover
         # finally, check if using a backend that doesn't require an xserver
         if pyvista.global_theme.jupyter_backend in [
             'client',
+            'html',
         ]:
             return

@@ -6553,6 +6554,7 @@ def show(
             * ``'none'`` : Do not display in the notebook.
             * ``'static'`` : Display a static figure.
             * ``'trame'`` : Display a dynamic figure with Trame.
+            * ``'html'`` : Use an ebeddable HTML scene.

             This can also be set globally with
             :func:`pyvista.set_jupyter_backend`.
diff --git a/pyvista/plotting/themes.py b/pyvista/plotting/themes.py
index 6154f567a5..8fbf97910e 100644
--- a/pyvista/plotting/themes.py
+++ b/pyvista/plotting/themes.py
@@ -1857,6 +1857,8 @@ def jupyter_backend(self) -> str:  # numpydoc ignore=RT01
           ``'server'`` and ``'client'`` into one backend. This requires a
           virtual frame buffer.

+        * ``'html'``: The ``'client'`` backend, but able to be embedded.
+
         * ``'none'`` : Do not display any plots within jupyterlab,
           instead display using dedicated VTK render windows.  This
           will generate nothing on headless servers even with a
diff --git a/pyvista/trame/jupyter.py b/pyvista/trame/jupyter.py
index 42b943efa6..b5d2251f0e 100644
--- a/pyvista/trame/jupyter.py
+++ b/pyvista/trame/jupyter.py
@@ -93,6 +93,23 @@ def src(self):  # numpydoc ignore=RT01
         return self._src


+class EmbeddableWidget(HTML):  # numpydoc ignore=PR01
+    """Custom HTML iframe widget for embedding the trame viewer."""
+
+    def __init__(self, plotter, width, height, **kwargs):
+        """Initialize."""
+        if HTML is object:
+            raise ImportError('Please install `ipywidgets`.')
+        scene = plotter.export_html(filename=None)
+        src = scene.getvalue().replace('"', '&quot;')
+        # eventually we could maybe expose this, but for now make sure we're at least
+        # consistent with matplotlib's color (light gray)
+        border = "border: 1px solid rgb(221,221,221);"
+        value = f'<iframe srcdoc="{src}" class="pyvista" style="width: {width}; height: {height}; {border}"></iframe>'
+        super().__init__(value, **kwargs)
+        self._src = src
+
+
 def launch_server(server=None, port=None, host=None, **kwargs):
     """Launch a trame server for use with Jupyter.

@@ -237,6 +254,8 @@ def show_trame(
         * ``'server'``: Uses a view that is purely server rendering.
         * ``'client'``: Uses a view that is purely client rendering (generally
           safe without a virtual frame buffer)
+        * ``'html'``: Exports the scene for client rendering that can be
+          embedded in a webpage.

     name : str, optional
         The name of the trame server on which the UI is defined.
@@ -303,6 +322,18 @@ def handler(viewer, src, **kwargs):
     if plotter.render_window is None:
         raise RuntimeError(CLOSED_PLOTTER_ERROR)

+    if plotter._window_size_unset:
+        dw, dh = '99%', '600px'
+    else:
+        dw, dh = plotter.window_size
+        dw = f'{dw}px'
+        dh = f'{dh}px'
+    kwargs.setdefault('width', dw)
+    kwargs.setdefault('height', dh)
+
+    if mode == 'html':
+        return EmbeddableWidget(plotter, **kwargs)
+
     if name is None:
         server = get_server(name=pyvista.global_theme.trame.jupyter_server_name)
     else:
@@ -335,15 +366,6 @@ def handler(viewer, src, **kwargs):
         protocol=kwargs.get('protocol', 'http'),
     )

-    if plotter._window_size_unset:
-        dw, dh = '99%', '600px'
-    else:
-        dw, dh = plotter.window_size
-        dw = f'{dw}px'
-        dh = f'{dh}px'
-    kwargs.setdefault('width', dw)
-    kwargs.setdefault('height', dh)
-
     if callable(handler):
         return handler(viewer, src, **kwargs)
     return Widget(viewer, src, **kwargs)
